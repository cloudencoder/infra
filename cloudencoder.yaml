Parameters:

  CidrBlock:
    Description: First two octets of the CIDR block for the VPC
    Type: String
    Default: "10.100"
    MinLength: 4
    MaxLength: 7
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})"

  InputBucket:
    AllowedPattern: "\\*|(?:[a-z0-9][a-z0-9-.]{1,61}[a-z0-9](,[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])*)"
    Type: String

  OutputBucket:
    AllowedPattern: "\\*|(?:[a-z0-9][a-z0-9-.]{1,61}[a-z0-9](,[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])*)"
    Type: String

  InstanceType:
    Type: String
    Default: c5.large
    Description: Default instance type for each worker

  NumberOfInstances:
    Type: Number
    Default: 1

  VolumeSize:
    Type: Number
    Default: 8
    Description: Size of the root volume (GB)

  MarketType:
    Type: String
    Default: on-demand
    AllowedValues:
      - on-demand
      - spot
    Description: Use spot instances or on-demand for the worker nodes

  OnDemandInstances:
    Type: Number
    Default: 1
    Description: The number of on-demand instances to create

  EmailAddress:
    Type: String

  Username:
    Type: String
    Default: admin
    Description: Part of the credentials to access the API

  Password:
    Type: String
    NoEcho: true
    Default: admin
    Description: Part of the credentials to access the API

  WorkerUrl:
    Type: String
    Default: https://cloudencoder-downloads.s3.eu-west-2.amazonaws.com/latest.tar
    Description: The URL where to download the worker application

Conditions:
  UseSpotInstances: !Equals [!Ref MarketType, "spot"]
  AutoSubscribe: !Not [ !Equals [!Ref EmailAddress, ""] ]

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ ".", [ !Ref CidrBlock, "0", "0/16" ] ]
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name 
          Value: !Sub '${AWS::StackName} VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Join [ ".", [ !Ref CidrBlock, "0", "0/24" ] ]
      AvailabilityZone: !Sub '${AWS::Region}a'
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name 
          Value: 'Public Subnet 1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Join [ ".", [ !Ref CidrBlock, "1", "0/24" ] ]
      AvailabilityZone: !Sub '${AWS::Region}b'
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name 
          Value: 'Public Subnet 2'

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Join [ ".", [ !Ref CidrBlock, "10", "0/24" ] ]
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name 
          Value: 'Private Subnet 1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Join [ ".", [ !Ref CidrBlock, "11", "0/24" ] ]
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name 
          Value: 'Private Subnet 2'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Join [ "", [ "com.amazonaws.", !Ref "AWS::Region", ".s3" ] ]
      VpcId: !Ref Vpc

  #
  # Queues
  #
  EncodingQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EncodingDeadLetterQueue.Arn
        maxReceiveCount: 3

  EncodingDeadLetterQueue:
    Type: AWS::SQS::Queue

  #
  # NAT
  #
  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NATInstance

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [NatAMI, !Ref "AWS::Region", AMI]
      InstanceType: t3.micro
      SourceDestCheck: false
      SecurityGroupIds:
        - !Ref NATSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "NAT Instance"

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: NAT-SG
      GroupDescription: Security group for the NAT instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join [ ".", [ !Ref CidrBlock, "10", "0/24" ] ]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join [ ".", [ !Ref CidrBlock, "10", "0/24" ] ]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join [ ".", [ !Ref CidrBlock, "11", "0/24" ] ]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join [ ".", [ !Ref CidrBlock, "11", "0/24" ] ]
  
  #
  # Autoscaling
  #
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref NumberOfInstances
      MaxSize: !Ref NumberOfInstances
      DesiredCapacity: !Ref NumberOfInstances
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: !If [UseSpotInstances, 0, !Ref OnDemandInstances]
          SpotAllocationStrategy: "capacity-optimized"
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_install-worker
            - 02_config-amazon-cloudwatch-agent
            - 03_restart-amazon-cloudwatch-agent
        01_install-worker:
          files:
            /etc/systemd/system/worker.service:
              content: !Sub |
                [Unit]
                Description=Encoder worker node
                [Service]
                Environment=TOPIC_ARN=${SNSTopic}
                User=nobody
                Group=nogroup
                ExecStart=/usr/local/bin/worker ${EncodingQueue} 
                StandardOutput=syslog
                Restart=always
                [Install]
                WantedBy=multi-user.target
            /etc/rsyslog.d/30-worker.conf:
              content: |
                # Log worker generated log messages to file
                if $programname == 'worker' and $syslogseverity >= 6 then /var/log/worker.log
                & stop
                if $programname == 'worker' and $syslogseverity <= 3 then /var/log/worker.err
                & stop
          sources:
            /usr/local/bin: !Ref WorkerUrl
          commands:
            01_restart_rsyslog:
              command: systemctl restart rsyslog
            02_start_service:
              command: systemctl start worker.service
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/worker.log",
                            "log_group_name": "/var/log/worker.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "file_path": "/var/log/worker.err",
                            "log_group_name": "/var/log/worker.err",
                            "log_stream_name": "{instance_id}"
                          }
                        ]
                      }
                    }
                  }
                }
        03_restart-amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref VolumeSize
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt WorkerProfile.Arn
        ImageId: !FindInMap [WorkerAMI, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install -y python-setuptools ffmpeg

            mkdir -p /opt/aws/bin
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz

            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i -E amazon-cloudwatch-agent.deb

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} --configsets default
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  #
  # IAM
  #
  WorkerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref WorkerRole

  WorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: workerpolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:DeleteMessage'
                Resource: !GetAtt EncodingQueue.Arn
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref SNSTopic
        -
          'Fn::Transform':
            - Name: S3Policy
              Parameters:
                Source: !Ref InputBucket
                Destination: !Ref OutputBucket
  #
  # Notifications
  #
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        Fn::If:
          - AutoSubscribe
          - - Endpoint: !Ref EmailAddress
              Protocol: email
          - !Ref AWS::NoValue

  #
  # API (minimal)
  #
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "CloudEncoder API"
      EndpointConfiguration:
        Types:
          - REGIONAL

  JobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "job"

  JobsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CustomAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:aws:apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt JobSubmitFunction.Arn
            - "/invocations"
      ResourceId: !Ref JobsResource
      RestApiId: !Ref RestApi

  CustomAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CustomAuthorizer
      AuthorizerUri: !Join
          - ""
          - - "arn:aws:apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt Authorizer.Arn
            - "/invocations"
      Type: TOKEN
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref RestApi

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ["JobsPost"]
    Properties:
      RestApiId: !Ref RestApi
      StageName: "v1"

  UnauthorizedGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        "gatewayresponse.header.WWW-Authenticate": "'Basic'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref RestApi
      StatusCode: "401"

  JobExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: sendmsg
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sqs:SendMessage'
                Resource: !GetAtt EncodingQueue.Arn

  InvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt JobSubmitFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref RestApi
          - "/*/*/*"

  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt Authorizer.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref RestApi
          - "/authorizers/"
          - !Ref CustomAuthorizer

  Authorizer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import base64
          import os
          import re

          def buildAllowPolicy(event, principalId):
              tmp = event['methodArn'].split(':')
              apiGatewayArnTmp = tmp[5].split('/')
              awsAccountId = tmp[4]
              awsRegion = tmp[3]
              restApiId = apiGatewayArnTmp[0]
              stage = apiGatewayArnTmp[1]
              apiArn = "arn:aws:execute-api:{}:{}:{}/{}/*/*".format(awsRegion, awsAccountId, restApiId, stage)

              policy = {
                'principalId': principalId,
                'policyDocument': {
                  'Version': '2012-10-17',
                  'Statement': [{
                    'Action': 'execute-api:Invoke',
                    'Effect': 'Allow',
                    'Resource': [apiArn]
                  }]
                }
              }
              return policy

          def handler(event, context):
              authToken = event['authorizationToken']

              creds = authToken.split()[1]
              principalId, password = base64.b64decode(creds).decode("utf-8").split(":")

              if not(principalId == os.environ['USERNAME'] and password == os.environ['PASSWORD']):
                  raise Exception('Unauthorized')

              # Build the policy
              authResponse = buildAllowPolicy(event, principalId)
              print(authResponse)
              return authResponse
      Handler: index.handler
      Runtime: python3.7
      Environment:
        Variables:
          USERNAME: !Ref Username
          PASSWORD: !Ref Password
      Role: !GetAtt AuthorizerRole.Arn

  JobSubmitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import boto3
          import json
          import os
          import uuid

          def handler(event, context):
              ref = str(uuid.uuid4())
              msg = json.loads(event['body'])
              msg['ref'] = ref

              client = boto3.client('sqs')
              response = client.send_message(
                  QueueUrl=os.environ['QUEUE_URL'],
                  MessageBody=json.dumps(msg)
              )

              return {
                'statusCode': 200,
                'body': json.dumps({"ref": ref})
              }
      Handler: index.handler
      Runtime: python3.7
      Environment:
        Variables:
          QUEUE_URL: !Ref EncodingQueue
      Role: !GetAtt JobExecutionRole.Arn

Mappings:

  # amzn-ami-vpc-nat-2018.03.0.20200206.0-x86_64-ebs
  NatAMI:
    us-east-1:
      AMI: ami-0f482d2adde2d9206
    us-east-2:
      AMI: ami-03c91470bf330c786
    us-west-1:
      AMI: ami-0835e289f6bdf8fa1
    us-west-2:
      AMI: ami-009816cdbb1e74ceb
    ap-south-1:
      AMI: ami-0361dc268daa6508c
    ap-northeast-2:
      AMI: ami-08afecec7f141617d
    ap-southeast-1:
      AMI: ami-0d3234bec84222e15
    ap-southeast-2:
      AMI: ami-047da15f3266cf6dd
    ap-northeast-1:
      AMI: ami-074cb7bcc3d5c43a4
    ca-central-1:
      AMI: ami-0a2754edae50584bc
    eu-central-1:
      AMI: ami-0594b21925f09cf41
    eu-west-1:
      AMI: ami-03658c485122ead5c
    eu-west-2:
      AMI: ami-087e3541df11a4e8f
    eu-west-3:
      AMI: ami-0abe78ab3216cfca6
    eu-north-1:
      AMI: ami-0e8e444fe7c4cc574
    sa-east-1:
      AMI: ami-0b31cea21f7c8edf8

  # Ubuntu Server 18.04 LTS (HVM), SSD Volume Type (64-bit x86)
  WorkerAMI:
    us-east-1:
      AMI: ami-07ebfd5b3428b6f4d
    us-east-2:
      AMI: ami-0fc20dd1da406780b
    us-west-1:
      AMI: ami-03ba3948f6c37a4b0
    us-west-2:
      AMI: ami-0d1cd67c26f5fca19
    ap-south-1:
      AMI: ami-0620d12a9cf777c87
    ap-northeast-2:
      AMI: ami-0cd7b0de75f5a35d1
    ap-southeast-1:
      AMI: ami-09a4a9ce71ff3f20b
    ap-southeast-2:
      AMI: ami-02a599eb01e3b3c5b
    ap-northeast-1:
      AMI: ami-07f4cb4629342979c
    ca-central-1:
      AMI: ami-0d0eaed20348a3389
    eu-central-1:
      AMI: ami-0b418580298265d5c
    eu-west-1:
      AMI: ami-035966e8adab4aaad
    eu-west-2:
      AMI: ami-006a0174c6c25ac06
    eu-west-3:
      AMI: ami-096b8af6e7e8fb927
    eu-north-1:
      AMI: ami-0b7937aeb16a7eb94
    sa-east-1:
      AMI: ami-05494b93950efa2fd

Outputs:

  EndpointUrl:
    Description: URL of the CloudEncoder API
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/job"
